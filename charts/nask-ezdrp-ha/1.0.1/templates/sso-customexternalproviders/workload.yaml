{{- if .Values.ssoExternalProviders.active }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.ssoExternalProviders.moduleName }}
  labels:
    app: {{ .Release.Name }}-{{ .Values.ssoExternalProviders.moduleName }}
    role: backend
    environment: {{ .Values.environment }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-{{ .Values.ssoExternalProviders.moduleName }}
      role: backend
      environment: {{ .Values.environment }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-{{ .Values.ssoExternalProviders.moduleName }}
        role: backend
        environment: {{ .Values.environment }}
    spec:
      {{- if and (.Values.affinity.nodeAffinitySelector.name) (.Values.affinity.nodeAffinitySelector.value) }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: {{ .Values.affinity.nodeAffinitySelector.name }}
                    operator: In
                    values:
                      - {{ .Values.affinity.nodeAffinitySelector.value | quote }}
      {{- end }}
      containers:
        - image: {{ .Values.imageCredentials.registryDomain }}/{{ .Values.ssoExternalProviders.image.name }}:{{ .Values.ssoExternalProviders.image.version }}
          env:
            - name: ICE_CLOUD_ADMIN_URL
              value: "http://{{ .Values.cloudadmin.moduleName }}:{{ .Values.cloudadmin.port }}"
            - name: ICE_CONFIG
              value: {{ .Values.ssoExternalProviders.cloudadmin.configname }}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 4
            initialDelaySeconds: {{ .Values.ssoExternalProviders.livenessDelay }}
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: {{ .Values.ssoExternalProviders.port }}
            timeoutSeconds: 1
          name: {{ .Values.ssoExternalProviders.moduleName }}
          readinessProbe:
            failureThreshold: 2
            initialDelaySeconds: {{ .Values.ssoExternalProviders.redinessDelay }}
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: {{ .Values.ssoExternalProviders.port }}
            timeoutSeconds: 1
          {{- if or (.Values.ssoExternalProviders.resources.limits.cpu) (.Values.ssoExternalProviders.resources.limits.memory) (.Values.ssoExternalProviders.resources.requests.cpu) (.Values.ssoExternalProviders.resources.requests.memory) }}
          resources:
            {{- if or (.Values.ssoExternalProviders.resources.limits.cpu) (.Values.ssoExternalProviders.resources.limits.memory) }}
            limits:
              {{- if .Values.ssoExternalProviders.resources.limits.cpu }}
              cpu: {{ .Values.ssoExternalProviders.resources.limits.cpu }}
              {{- end }}
              {{- if .Values.ssoExternalProviders.resources.limits.memory }}
              memory: {{ .Values.ssoExternalProviders.resources.limits.memory }}
              {{- end }}
            {{- end }}
            {{- if or (.Values.ssoExternalProviders.resources.requests.cpu) (.Values.ssoExternalProviders.resources.requests.memory) }}
            requests:
              {{- if .Values.ssoExternalProviders.resources.requests.cpu }}
              cpu: {{ .Values.ssoExternalProviders.resources.requests.cpu }}
              {{- end }}
              {{- if .Values.ssoExternalProviders.resources.requests.memory }}
              memory: {{ .Values.ssoExternalProviders.resources.requests.memory }}
              {{- end }}
            {{- end }}
          {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities: {}
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          stdin: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          tty: true
      dnsConfig: {}
      dnsPolicy: ClusterFirst
      initContainers:
        - command:
            - sh
            - -c
            - |
              /docker-entrypoint.sh wait_for cloudadmin:${CLOUDADMIN_HOST}:${CLOUDADMIN_PORT}
          env:
            - name: CLOUDADMIN_HOST
              value: {{ .Values.cloudadmin.moduleName }}
            - name: CLOUDADMIN_PORT
              value: {{ .Values.cloudadmin.port | quote }}
          image: {{ .Values.waitfor.image.registry }}/{{ .Values.waitfor.image.name }}:{{ .Values.waitfor.image.version }}
          imagePullPolicy: IfNotPresent
          name: waitfor
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities: {}
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          stdin: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          tty: true
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      serviceAccount: ezdrp
      serviceAccountName: ezdrp
{{ end }}