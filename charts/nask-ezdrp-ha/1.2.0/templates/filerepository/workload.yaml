{{- if .Values.filerepository.active }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.filerepository.moduleName }}
  labels:
    app: {{ .Release.Name }}-{{ .Values.filerepository.moduleName }}
    role: backend
    environment: {{ .Values.environment }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-{{ .Values.filerepository.moduleName }}
      role: backend
      environment: {{ .Values.environment }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-{{ .Values.filerepository.moduleName }}
        role: backend
        environment: {{ .Values.environment }}
    spec:
      {{- if and (.Values.affinity.nodeAffinitySelector.name) (.Values.affinity.nodeAffinitySelector.value) }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: {{ .Values.affinity.nodeAffinitySelector.name }}
                    operator: In
                    values:
                      - {{ .Values.affinity.nodeAffinitySelector.value | quote }}
      {{- end }}
      containers:
        - image: {{ .Values.imageCredentials.registryDomain }}/{{ .Values.filerepository.image.name }}:{{ .Values.filerepository.image.version }}
          env:
          - name: BUFFER_CHUNK_SIZE
            value: {{ .Values.filerepository.bufferChunkSize | quote }}
          - name: MAX_REQUEST_SIZE
            value: {{ .Values.filerepository.maxRequestSize | quote }}
          - name: REDIS_TTL
            value: {{ .Values.filerepository.redisTTL | quote }}
          - name: TOKEN_NAME
            value: {{ .Values.filerepository.tokenName | quote }}
          - name: EZD_FILEREPO_STORAGE_TYPE
            value: {{ .Values.filerepository.persistence.filerepoStorageType | quote }}

{{- if eq .Values.filerepository.persistence.filerepoStorageType "S1" }}
          - name: EZD_FILEREPO_MOUNT_POINT
            value: {{ .Values.filerepository.persistence.mountPoint | quote }}
{{- end }}
{{- if eq .Values.filerepository.persistence.filerepoStorageType "S3" }}
          - name: MINIO_HOST
            value: {{ .Values.filerepository.persistence.s3.host | quote }}
          - name: MINIO_PORT
            value: {{ .Values.filerepository.persistence.s3.port | quote }}
          - name: MINIO_ACCESS_KEY
            value: {{ .Values.filerepository.persistence.s3.access_key | quote }}
          - name: MINIO_SECRET_KEY
            value: {{ .Values.filerepository.persistence.s3.secret_key | quote }}
          - name: MINIO_TLS_ENABLED
            value: {{ .Values.filerepository.persistence.s3.tls | default false | quote }}
          - name: MINIO_DEFAULT_BUCKETNAME
            value: {{ .Values.filerepository.persistence.s3.bucketname | quote }}
{{- end }}
{{- if eq .Values.filerepository.persistence.filerepoStorageType "EZD_PUW" }}
          - name: EZD_FILEREPO_MOUNT_POINT
            value: {{ .Values.filerepository.persistence.ezdpuw.dataPath | quote }}
          - name: EZD_FILEREPO_META_MOUNT_POINT
            value: {{ .Values.filerepository.persistence.ezdpuw.metaPath | quote }}
{{- end }}
          - name: REDIS_HOST
            value: {{ .Values.redisExt.host }}
          - name: REDIS_PORT
            value: {{ .Values.redisExt.port | quote  }}
          - name: REDIS_SERVICENAME
            value: {{ .Values.redisExt.user }}
          - name: REDIS_PASSWORD
            value: {{ .Values.redisExt.password }}
          - name: Serilog__MinimumLevel__Default
            value: {{ .Values.ezd.minimum_log_level | quote }}
          - name: Serilog__WriteTo__1__Args__serverUrl
            value: http://seq.seq.svc.cluster.local
          - name: Serilog__WriteTo__2__Args__uri
            value: http://loki.loki.svc.cluster.local:3100
          - name: Serilog__WriteTo__2__Args__labels__1__value
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: Serilog__Properties__InstanceName
            value: {{ .Values.domainInfo.name }}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 4
            initialDelaySeconds: {{ .Values.filerepository.livenessDelay }}
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: {{ .Values.filerepository.port }}
            timeoutSeconds: 1
          name: {{ .Values.filerepository.moduleName }}
          readinessProbe:
            failureThreshold: 2
            initialDelaySeconds: {{ .Values.filerepository.redinessDelay }}
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: {{ .Values.filerepository.port }}
            timeoutSeconds: 1
        {{- if or (.Values.filerepository.resources.limits.cpu) (.Values.filerepository.resources.limits.memory) (.Values.filerepository.resources.requests.cpu) (.Values.filerepository.resources.requests.memory) }}
          resources:
          {{- if or (.Values.filerepository.resources.limits.cpu) (.Values.filerepository.resources.limits.memory) }}
            limits:
            {{- if .Values.filerepository.resources.limits.cpu }}
              cpu: {{ .Values.filerepository.resources.limits.cpu }}
            {{- end }}
            {{- if .Values.filerepository.resources.limits.memory }}
              memory: {{ .Values.filerepository.resources.limits.memory }}
            {{- end }}
            {{- end }}
            {{- if or (.Values.filerepository.resources.requests.cpu) (.Values.filerepository.resources.requests.memory) }}
            requests:
            {{- if .Values.filerepository.resources.requests.cpu }}
              cpu: {{ .Values.filerepository.resources.requests.cpu }}
            {{- end }}
            {{- if .Values.filerepository.resources.requests.memory }}
              memory: {{ .Values.filerepository.resources.requests.memory }}
            {{- end }}
          {{- end }}
        {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities: {}
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          stdin: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          tty: true
          volumeMounts:
      {{- if .Values.storage.enabled }}
        {{- if or (eq .Values.filerepository.persistence.filerepoStorageType "S1") ( .Values.filerepository.persistence.ezdpuwmigration.enabled ) }}
          {{- if eq .Values.filerepository.persistence.filerepoStorageType "S1" }}
            - mountPath: {{ .Values.filerepository.persistence.mountPoint | quote }}
              name: "{{ .Values.filerepository.moduleName }}-storage"
          {{- end }}
          {{- if .Values.filerepository.persistence.ezdpuwmigration.enabled }}
            - mountPath: {{ .Values.filerepository.persistence.ezdpuwmigration.dataPath | quote }}
              name: "{{ .Values.filerepository.moduleName }}-storage-puw"
          {{- end }}
          {{- if (lookup "v1" "Secret" .Release.Namespace "s3cacert") }}
            - mountPath: /usr/local/share/ca-certificates/
              name: s3cacert
              readOnly: true
          {{- end }}
        {{- end }}
      {{- end }}
      dnsConfig: {}
      dnsPolicy: ClusterFirst
      {{- if and (eq .Values.filerepository.persistence.filerepoStorageType "S1") (or (.Release.IsInstall) (.Values.storage.force_chown)) }}
      initContainers:
            - name: volume-owner-hack
              image: busybox
              command:
                - sh
                - -c
                - |
                  chown -R 501:501 {{ .Values.filerepository.persistence.mountPoint | quote }}                  
              volumeMounts:
              - name: "{{ .Values.filerepository.moduleName }}-storage"
                mountPath: {{ .Values.filerepository.persistence.mountPoint | quote }}
      {{- end }}
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
  {{- if .Values.storage.enabled }}
  {{- if or (eq .Values.filerepository.persistence.filerepoStorageType "S1") ( .Values.filerepository.persistence.ezdpuwmigration.enabled ) }}
      {{- if eq .Values.filerepository.persistence.filerepoStorageType "S1" }}
        - name: "{{ .Values.filerepository.moduleName }}-storage"
          persistentVolumeClaim:
            claimName: "{{ .Values.filerepository.moduleName }}-storage"
        {{- end }}
        {{- if .Values.filerepository.persistence.ezdpuwmigration.enabled }}
        - name: "{{ .Values.filerepository.moduleName }}-storage-puw"
          persistentVolumeClaim:
            claimName: "{{ .Values.filerepository.moduleName }}-storage-puw"
        {{- end }}
        {{- if (lookup "v1" "Secret" .Release.Namespace "s3cacert") }}
        - name: s3cacert
          secret:
            defaultMode: 420
            secretName: s3cacert
        {{- end }}
    {{- end }}
  {{- end }}
      serviceAccount: ezdrp
      serviceAccountName: ezdrp
{{ end }}