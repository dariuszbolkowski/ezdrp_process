{{- if .Values.ocrApi.active }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.ocrApi.moduleName }}
  labels:
    app: {{ .Release.Name }}-{{ .Values.ocrApi.moduleName }}
    role: backend
    environment: {{ .Values.environment }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Release.Name }}-{{ .Values.ocrApi.moduleName }}
      role: backend
      environment: {{ .Values.environment }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-{{ .Values.ocrApi.moduleName }}
        role: backend
        environment: {{ .Values.environment }}
    spec:
      {{- if and (.Values.affinity.nodeAffinitySelector.name) (.Values.affinity.nodeAffinitySelector.value) }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: {{ .Values.affinity.nodeAffinitySelector.name }}
                    operator: In
                    values:
                      - {{ .Values.affinity.nodeAffinitySelector.value | quote }}
      {{- end }}
      initContainers:
        - name: {{ .Values.ocrApi.moduleName }}-create-ocr-vhost
          image: "{{ .Values.job.rabbit.registry }}/{{ .Values.job.rabbit.imageName }}:{{ .Values.job.rabbit.imageTag }}"
          command:
            - sh
            - -c
            - >
              apt update;
              DEBIAN_FRONTEND=noninteractive apt install -y curl;
              while ! rabbitmqadmin -H ${BROKER_SERVER_HOST} -u ${BROKER_LOGIN} -p ${BROKER_PASSWORD} --vhost=/ list queues; do sleep 1; done;
              if ! rabbitmqadmin -H ${BROKER_SERVER_HOST} -u ${BROKER_LOGIN} -p ${BROKER_PASSWORD} --vhost=${BROKER_VHOST} list queues ; then
                echo "vhost ${BROKER_VHOST} is doesnt exist";
                if curl --fail -u ${BROKER_LOGIN}:${BROKER_PASSWORD} -X PUT http://${BROKER_SERVER_HOST}:15672/api/vhosts/${BROKER_VHOST} ; then
                  echo "i just created it";
                else
                  echo "i have problem with creating ${BROKER_VHOST} vhost";
                fi
              else
                echo "vhost ${BROKER_VHOST} is exist - skip";
              fi
          env:
            - name: BROKER_VHOST
              value: {{ .Values.ocrApi.rabbitmq.vhost }}
            - name: BROKER_SERVER_HOST
              value: {{ .Values.ezdBackend.rabbitmqConfig.fullnameOverride }}
            - name: BROKER_PASSWORD
              value: {{ .Values.global.rabbitmqConfig.auth.password }}
            - name: BROKER_PORT
              value: {{ .Values.rabbitExt.port | quote }}
            - name: BROKER_LOGIN
              value: {{ .Values.global.rabbitmqConfig.auth.username }}
          resources:
            limits:
              cpu: "1000m"
              memory: "1Gi"
            requests:
              cpu: "100m"
              memory: "50Mi"
      containers:
        - image: {{ .Values.imageCredentials.registryDomain }}/{{ .Values.ocrApi.image.name }}:{{ .Values.ocrApi.image.version }}
          env:
          - name: RABBIT_OCR_VHOST_NEW
            value: {{ .Values.ocrApi.rabbitmq.vhost | quote }}
          - name: RABBIT_OCR_VHOST_RESULT
            value: {{ .Values.ocrApi.rabbitmq.vhost | quote }}
          - name: RABBIT_OCR_HOST
            value: {{ .Values.ezdBackend.rabbitmqConfig.fullnameOverride }}
          - name: RABBIT_OCR_PORT
            value: {{ .Values.rabbitExt.port | quote }}
          - name: RABBIT_OCR_USERNAME
            value: {{ .Values.global.rabbitmqConfig.auth.username }}
          - name: RABBIT_OCR_PASSWORD
            value: {{ .Values.global.rabbitmqConfig.auth.password | quote }}
          - name: REDIS_SERVER_PATH
            value: {{ .Values.ezdBackend.redisConfig.fullnameOverride }}
          - name: REDIS_SERVER_PORT
            value: {{ .Values.redisExt.port | quote }}
          - name: REDIS_PASSWORD
            value: {{ .Values.global.redisConfig.auth.password | quote }}
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 4
            initialDelaySeconds: {{ .Values.ocrApi.livenessDelay }}
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: {{ .Values.ocrApi.port }}
            timeoutSeconds: 1
          name: {{ .Values.ocrApi.moduleName }}
          readinessProbe:
            failureThreshold: 2
            initialDelaySeconds: {{ .Values.ocrApi.redinessDelay }}
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: {{ .Values.ocrApi.port }}
            timeoutSeconds: 1
          {{- if or (.Values.ezdrpApi.resources.limits.cpu) (.Values.ezdrpApi.resources.limits.memory) (.Values.ezdrpApi.resources.requests.cpu) (.Values.ezdrpApi.resources.requests.memory) }}
          resources:
            {{- if or (.Values.ocrApi.resources.limits.cpu) (.Values.ocrApi.resources.limits.memory) }}
            limits:
              {{- if .Values.ocrApi.resources.limits.cpu }}
              cpu: {{ .Values.ocrApi.resources.limits.cpu }}
              {{- end }}
              {{- if .Values.ocrApi.resources.limits.memory }}
              memory: {{ .Values.ocrApi.resources.limits.memory }}
              {{- end }}
            {{- end }}
            {{- if or (.Values.ocrApi.resources.requests.cpu) (.Values.ocrApi.resources.requests.memory) }}
            requests:
              {{- if .Values.ocrApi.resources.requests.cpu }}
              cpu: {{ .Values.ocrApi.resources.requests.cpu }}
              {{- end }}
              {{- if .Values.ocrApi.resources.requests.memory }}
              memory: {{ .Values.ocrApi.resources.requests.memory }}
              {{- end }}
            {{- end }}
          {{- end }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities: {}
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
          stdin: true
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          tty: true
      dnsConfig: {}
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      serviceAccount: ezdrp
      serviceAccountName: ezdrp
{{- end }}
